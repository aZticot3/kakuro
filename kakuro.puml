@startuml

skinparam class {
  BackgroundColor white
  ArrowColor black
  BorderColor black
}

package "Kakuro Solver" {
    class KakuroGame {
        - grid: Grid*
        - solutionGrid: Grid*
        - isSolved: bool
        - gridFiles: vector<string>
        + loadGrid(filename: string, type: string): bool
        + solve(): bool
        + display(): void
        + run(): void
        - displayMenu(): void
        - displayGridFiles(): void
        - processCommand(command: string): bool
        - scanGridFiles(directory: string): void
        - playManually(): bool
        - checkPlayerGrid(): void
    }

    abstract class Cell {
        # row: int
        # col: int
        + getRow(): int
        + getCol(): int
        + {abstract} display(): string
        + displayColored(isCorrect: bool): string
    }

    class EmptyCell {
        - value: int
        - possibleValues: set<int>
        + setValue(value: int): void
        + getValue(): int
        + getPossibleValues(): set<int>
        + removePossibleValue(value: int): void
        + clearPossibleValues(): void
        + display(): string override
        + displayColored(isCorrect: bool): string override
    }

    class FilledCell {
        - value: int
        + getValue(): int
        + display(): string override
    }

    class ClueCell {
        - rightSum: int
        - downSum: int
        + getRightSum(): int
        + getDownSum(): int
        + display(): string override
    }

    class BlackCell {
        + display(): string override
    }

    abstract class Grid {
        # height: int
        # width: int
        # cells: vector<vector<Cell*>>
        + getHeight(): int
        + getWidth(): int
        + getCell(row: int, col: int): Cell*
        + setCell(row: int, col: int, cell: Cell*): void
        + display(): void
        + displayWithValidation(solutionGrid: Grid): void
        + {abstract} loadFromFile(filename: string): bool
    }

    class KakuroSolver {
        - grid: Grid*
        + solve(): bool
        - backtrack(): bool
        - isSumValid(clue: ClueCell*): bool
        - isValueValid(row: int, col: int, value: int): bool
        - getEmptyCells(): vector<pair<int,int>>
    }

    ' Factory Method Pattern Implementation
    
    interface GridCreator {
        + {abstract} createGrid(height: int, width: int): Grid*
        + {abstract} canHandleType(type: string): bool
    }

    class DefaultGridCreator {
        + createGrid(height: int, width: int): Grid* override
        + canHandleType(type: string): bool override
    }

    class JsonGridCreator {
        + createGrid(height: int, width: int): Grid* override
        + canHandleType(type: string): bool override
    }

    class GridFactory {
        - {static} creators: vector<unique_ptr<GridCreator>>
        - {static} isInitialized: bool
        + {static} registerCreator(creator: unique_ptr<GridCreator>): void
        + {static} creerGrid(type: string, hauteur: int, largeur: int): Grid*
        + {static} creerGrid(type: GridType, hauteur: int, largeur: int): Grid*
        + {static} initialize(): void
    }

    enum GridType {
        DEFAULT
        JSON
    }

    class Grid_Default {
        + loadFromFile(filename: string): bool override
        + validerDonnee(valeur: int): bool
    }

    class Grid_Json {
        + loadFromFile(filename: string): bool override
        + validerDonnee(valeur: int): bool
    }

    ' Relationships
    KakuroGame --> KakuroSolver: uses
    KakuroGame *-- Grid: possède
    KakuroGame ..> GridFactory: uses
    
    Grid <|-- Grid_Default
    Grid <|-- Grid_Json
    Grid "1" *-- "1..*" Cell: contient
    
    Cell <|-- EmptyCell
    Cell <|-- FilledCell
    Cell <|-- ClueCell
    Cell <|-- BlackCell
    
    KakuroSolver --> Grid: manipule
    
    ' Factory Method Pattern Relationships
    GridFactory ..> GridCreator: uses
    GridFactory o-- GridType: possède
    GridFactory ..> Grid_Default: crée
    GridFactory ..> Grid_Json: crée
    
    GridCreator <|.. DefaultGridCreator
    GridCreator <|.. JsonGridCreator
    
    DefaultGridCreator ..> Grid_Default: crée
    JsonGridCreator ..> Grid_Json: crée
}

@enduml